/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package com.deliveryexpress.de;

import com.deliveryexpress.objects.TelegramUser;
import com.deliveryexpress.objects.TelegramUser.Bussines;
import com.deliveryexpress.objects.TelegramUser.Customer;
import com.deliveryexpress.objects.TelegramUser.DeliveryMan;
import com.deliveryexpress.utils.Utils;
import java.util.ArrayList;
import java.util.Objects;
import java.util.OptionalInt;
import java.util.stream.Stream;

/**
 *
 * @author DeliveryExpress
 */
public class OrdersControl {
    
    public static class Order {

        ArrayList<Delivery> routes = new ArrayList<>();
        int currentDelivering;
        
        public static final int MAX_DELIVERIES_PER_ORDER = 3;

        String id;
        String date;
        
        DeliveryMan deliveryMan;

        public Order() {
            this.currentDelivering = 0;
            this.id = Utils.generateOrderId();
            this.date = Utils.DateUtils.getNowDate();
        }
        
        public Order(Delivery delivery) {
            this.currentDelivering = 0;
            this.id = Utils.generateOrderId();
            this.date = Utils.DateUtils.getNowDate();
            routes.add(delivery);
        }
        
        
        boolean hasDeliveryMan() {

            return deliveryMan != null;
        }

        public DeliveryMan getDeliveryMan() {
            return deliveryMan;
        }

        public void setDeliveryMan(DeliveryMan deliveryMan) {
            this.deliveryMan = deliveryMan;
        }

        public String getId() {

            if (routes.size() == 1) {
                return routes.get(0).getId();
            } else {

                return this.id;
            }

        }
        
        public int getPreparationTimeMinutes() {
            OptionalInt max = routes.stream().mapToInt(c-> c.getPreparationTimeMinutes()).max();
            return max.getAsInt();
        }

        public Delivery getCurrentDelivering() {

            if (routes.size() == 1) {
                return routes.get(0);
            } else {

                return routes.get(currentDelivering);
            }

        }

        public String getDate() {
            return date;
        }
        
        public float getTotal() {

            return (float) routes.stream().mapToDouble(c -> c.getOrderCost()).sum();

        }
        
         public float getTotalDeliveryCost() {

            return (float) routes.stream().mapToDouble(c -> c.getDeliveryCost()).sum();

        }
        
        
        public int countDeliveries() {
            return this.routes.size();
        }
        
        public String getStatus() {

            if (routes.isEmpty()) {

                return "SIN ENTREGA PENDIENTE";
            }

            if (routes.size() < 1) {

                if (routes.stream().allMatch(c -> c.getStatus().equals(Delivery.DeliveryStatus.PREPARACION))) {
                    return OrderStatus.PREPARACION;
                } else if (routes.stream().allMatch(c -> c.getStatus().equals(OrderStatus.LISTO))) {
                    return OrderStatus.LISTO;
                } else if (routes.stream().filter(c -> c.getStatus().equals(OrderStatus.ENTREGANDO)).findFirst().orElse(null) != null) {
                    return OrderStatus.ENTREGANDO;
                } else if (routes.stream().allMatch(c -> c.getStatus().equals(OrderStatus.ENTREGADO))) {
                    return OrderStatus.ENTREGADO;
                }

                if (routes.stream().filter(c -> c.getStatus().equals(OrderStatus.CANCELADO)).findFirst().orElse(null) != null) {
                        return OrderStatus.ENTREGAS_INCOMPLETA;
                }

            }

            return "SIN ESTADO";

        }

        String toString(String visializeFor) {

            String head = String.join("\n", new String[]{this.getId(), this.getDate(), this.getStatus(), String.valueOf(this.getPreparationTimeMinutes())});

            String body = "";
            if (this.hasDeliveryMan()) {
                body += this.getDeliveryMan().toString(visializeFor);
            }
            
            if(this.pickupOntheSamePlace()){
                
                //body +=this.getPickupPlace();
            
            }

            if (this.hasDeliveries()) {
               body += this.getDeliveriesToString();
            }

            String footer = String.join("\n", new String[]{String.valueOf(this.getTotal()), String.valueOf(this.getTotalDeliveryCost())});

            return toString();

        }

        @Override
        public String toString() {
            return "Order{" + "routes=" + routes + ", currentDelivering=" + currentDelivering + ", id=" + id + ", date=" + date + ", deliveryMan=" + deliveryMan + '}';
        }

        private boolean hasDeliveries() {
        
            return this.routes !=null &&!this.routes.isEmpty();
        
        }
        
       

        private String getDeliveriesToString() {
        
            ArrayList<String> list = new ArrayList<>();
            for(Delivery d:routes){
                list.add(d.toString());
                
            
            }
            
            return String.join("\n", list);
        
        }

        private boolean pickupOntheSamePlace() {

            if (routes.size() == 1) {
                return true;
            } else {

                return routes.stream().allMatch(c -> c.getBussines().getAccountId().equals(this.getCurrentDelivering().getBussines().getAccountId()));

            }

        }

         public static interface OrderStatus {

            String PREPARACION = "PREPARACION";
            String LISTO = "LISTO";
            String ENTREGANDO = "ENTREGANDO";
            String ENTREGADO = "ENTREGADO";
            String ENTREGAS_INCOMPLETA = "ENTREGAS_INCOMPLETA";
            String CANCELADO = "CANCELADO";

        }
    
    }
    
    
    public static class Delivery{
        
        String id;
        String status;
        int preparationTimeMinutes;
        String creationDate;
        
        Bussines bussines;
        Customer customer;
        
        float orderCost;
        float deliveryCost;

        

        public Delivery(Bussines bussines) {
            this.bussines = bussines;
            this.id = Utils.generateOrderId();
            this.status = DeliveryStatus.PREPARACION;
            this.creationDate = Utils.DateUtils.getNowDate();
        }

        public String getId() {
            return id;
        }

        public void setId(String id) {
            this.id = id;
        }

        public String getStatus() {
            return status;
        }

        public void setStatus(String status) {
            this.status = status;
        }

        public int getPreparationTimeMinutes() {
            return preparationTimeMinutes;
        }

        public void setPreparationTimeMinutes(int preparationTimeMinutes) {
            this.preparationTimeMinutes = preparationTimeMinutes;
        }

        public String getCreationDate() {
            return creationDate;
        }

        public void setCreationDate(String creationDate) {
            this.creationDate = creationDate;
        }

        public Bussines getBussines() {
            return bussines;
        }

        public void setBussines(Bussines bussines) {
            this.bussines = bussines;
        }

        public Customer getCustomer() {
            return customer;
        }

        public void setCustomer(Customer customer) {
            this.customer = customer;
        }

        public float getOrderCost() {
            return orderCost;
        }

        public void setOrderCost(float orderCost) {
            this.orderCost = orderCost;
        }

        public float getDeliveryCost() {
            return deliveryCost;
        }

        public void setDeliveryCost(float deliveryCost) {
            this.deliveryCost = deliveryCost;
        }

        public String toString(){
        
            return String.join("\n", new String[]{Objects.toString(customer,"Not Customer"),String.valueOf(this.getOrderCost()),String.valueOf(this.getDeliveryCost())});
        }

        public static interface DeliveryStatus {

            String PREPARACION = "PREPARACION";
            String LISTO = "LISTO";
            String EN_CAMINO = "EN_CAMINO";
            String EN_DOMICILIO = "EN_DOMICILIO";
            String ENTREGADO = "ENTREGADO";
            String CANCELADO = "CANCELADO";

        }

    
    }
    
}
